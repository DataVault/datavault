def GH_TAG=""
def isGitTagValid(String gitTag) {
    def status=sh(script: "git check-ref-format refs/tags/${gitTag}", returnStatus: true)
    return status == 0;
}
def hasGitTagBeenUsedAlready(String gitTag) {
    def status=sh (script:"git show refs/tags/${gitTag} --", returnStatus:true)
    return status == 0;
}
def getMyJenkinsHostname() {
    return env.BUILD_URL.split('/')[2].split(':')[0]
}
pipeline {
    parameters {
      booleanParam(name: ENABLE_UNIT_TESTS, defaultValue: true)
      booleanParam(name: ENABLE_INTEGRATION_TESTS, defaultValue: true)
      string(name: 'TAG', defaultValue: '', description: 'A Tag that will be added to github to link the code to this build.')
      credentials(
        name: 'GH_TAG_CREDENTIALS_ID',
        credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl',
        defaultValue: '',
        required: false,
        description: 'Credentials for the GitHub repository' )
    }
    agent {
      dockerfile {
        dir 'dv5/jenkins'
        filename 'Dockerfile.jenkins'
                additionalBuildArgs '--build-arg JENKINS_UID=$(id -u) --build-arg JENKINS_GID=$(id -g) --build-arg DOCKER_GID=$(getent group docker | cut -d: -f3)'
        args  '-e TZ=Europe/London --group-add=docker -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/jenkins/.m2:/home/jenkins/.m2 -e JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8'
      }
    }
    stages {
        stage('before anything else, check that Git Tag has not been used already') {
          //the GH_TAG variable set here is used in the stage 'Tag Build'
          steps {
            script {
              env.MY_JENKINS_HOSTNAME = getMyJenkinsHostname()
              GH_TAG = TAG.trim().replaceAll(" ","_")
              if (GH_TAG != "") {
                if (!isGitTagValid(GH_TAG)) {
                  error "Tag [${GH_TAG}] is not valid"
                }
                if (hasGitTagBeenUsedAlready(GH_TAG)) {
                  error "The Tag [${GH_TAG}] has been used already."
                }
              } else {
                echo "ignoring empty Git Tag"
              }
            }
          }
        }
        stage('Test Docker Socket') {
           steps {
              echo "Unit Tests.. [$ENABLE_UNIT_TESTS]"
              echo "Integration Tests.. [$ENABLE_INTEGRATION_TESTS]"
              echo 'Testing Docker Socket'
              sh 'curl --silent -XGET --unix-socket /var/run/docker.sock http://localhost/info | jq'
           }
        }
        stage('Compile') {
            steps {
                echo 'Compiling..'
                sh './mvnw clean compile'
            }
        }
        stage('Unit Tests') {
            steps {
                echo "Unit Tests.. [${env.ENABLE_UNIT_TESTS}"
                script {
                  if (env.ENABLE_UNIT_TESTS == 'true') {
                    sh './mvnw test'
                  } else {
                    echo "Unit Tests Disabled";
                  }
                }
                junit '**/surefire-reports/*Test.xml'
            }
        }
        stage('Integration Tests') {
            steps {
                echo "Integration Tests.. [${env.ENABLE_INTEGRATION_TESTS}"
                script {
                  if (env.ENABLE_INTEGRATION_TESTS == 'true') {
                    sh './mvnw integration-test -Dskip.unit.tests -Dmaven.main.skip'
                  } else {
                    echo "Unit Tests Disabled";
                  }
                }
                junit '**/failsafe-reports/*IT.xml'
            }
        }
        stage('Install') {
            steps {
                echo 'installing locally'
                sh './mvnw install -Dskip.unit.tests -Dskip.integration.tests -Dmaven.main.skip'
            }
        }
        stage('Tag Build') {
          steps {
            script {
              if (GH_TAG != "") {
                echo "checking GH_TAG_CREDENTIALS_ID"
                // We need Git Credentials to push the tag
                echo "GH_TAG_CREDENTIALS_ID is [${GH_TAG_CREDENTIALS_ID}]"
                if ( env.GH_TAG_CREDENTIALS_ID && env.GH_TAG_CREDENTIALS_ID.trim() != "" ) {
                  //The GH_TAG variable is set in an earlier Stage
                  sh "echo 'user.email should be [jenkins@${MY_JENKINS_HOSTNAME}]'"
                  sh "git -c user.name='Jenkins' -c user.email='jenkins@${MY_JENKINS_HOSTNAME}' tag -a '$GH_TAG' -m '${TAG}' ${GIT_COMMIT}"
                  withCredentials([gitUsernamePassword(credentialsId: env.GH_TAG_CREDENTIALS_ID)]) {
                    sh "git config --global user.name '$GIT_USERNAME'"
                    sh "git push origin refs/tags/${GH_TAG}"
                  }
                } else {
                  echo "Not adding Git Tag '$GH_TAG'. The value of 'GH_TAG_CREDENTIALS_ID' was empty."
                }
              } else {
                echo "ignoring empty Git Tag"
              }
            }
          }
        }
    }
    post {
        always {
            jacoco(
                execPattern: '**/*.exec',
                classPattern: '*/target/classes',
                sourcePattern: '*/src/main/java',
                exclusionPattern: '*/src/test*'
            )
        }
        success {
            echo "BUILD SUCCESS : Recording Artifacts.."
            sh 'mkdir -p artifacts'
            sh 'mv datavault-webapp/target/datavault-webapp.jar artifacts/datavault-webapp.jar'
            sh 'mv datavault-worker/target/datavault-worker.jar artifacts/datavault-worker.jar'
            sh 'mv datavault-broker/target/datavault-broker.jar artifacts/datavault-broker.jar'
            archiveArtifacts artifacts: 'artifacts/datavault-webapp.jar, artifacts/datavault-worker.jar, artifacts/datavault-broker.jar', fingerprint: true
        }
    }
}
